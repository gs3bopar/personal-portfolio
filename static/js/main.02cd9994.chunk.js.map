{"version":3,"sources":["constants.js","App/Modal/Modal.jsx","static/materials/skyWithSun.jpg","static/materials/heightMap.png","App/Game/Props/Terrain/Terrain.jsx","shaders/shaders.js","gameState.js","App/Game/Props/TankModel/TankModel.jsx","App/Font/GameOverRegular/GameOverRegular.jsx","App/Game/GamePlay/Enemies/Enemies.jsx","App/Game/GamePlay/Lasers/Laser/Laser.jsx","App/Game/GamePlay/Lasers/LaserController/LaserController.jsx","App/Game/GamePlay/Score/Score.jsx","utils.js","App/Game/GamePlay/GamePlay.jsx","App/App.jsx","index.js"],"names":["ABOUT_ME","Object","freeze","NAME","WORKING","MY_STORY_STRING","MY_STORY_EXPLAIN","STRING","EXPERIENCES","LOCATION_TORONTO","LOCATION_NEW_YORK","LOCATION_NORTH_YORK","TD_SECURITIES","TD_SECURITIES_OCCUPATION","RYERSON_UNIVERSITY","RYERSON_UNIVERSITY_OCCUPATION","RYERSON_UNIVERSITY_LINK","RYERSON_UNIVERSITY_LINK_DOCS","LIFION_BY_ADP","LIFION_BY_ADP_OCCUPATION","STRATUS_360_INC","STRATUS_360_INC_OCCUPATION","IBI_GROUP","IBI_GROUP_OCCUPATION","CONTACT_ME","EMAIL","EMAIL_LINK","LINKEDIN_LINK","GITHUB_LINK","GITHUB","LINKEDIN","MODAL","CLOSE","Modal","enemiesHit","setEnemiesHit","showHideClassName","values","includes","className","href","target","rel","onClick","e","preventDefault","closeAllModals","Terrain","props","heightMap","useTexture","skyRoadHeightMap","encoding","THREE","wrapS","wrapT","anisotropy","textureMap","skyRoadTextureMap","minFilter","terrainRef","useRef","useFrame","current","position","z","GAME_SPEED","receiveShadow","rotation","Math","PI","ref","args","fog","uniforms","bumpTexture","value","bumpScale","terrainTexture","color","vertexShader","fragmentShader","side","tankPositionState","atom","key","default","enemyPositionState","x","y","text","laserPositionState","scoreState","TankModel","tank","fbx","useFBX","useRecoilState","tankPosition","setTankPosition","mouse","children","useEffect","traverse","child","isMesh","material","pointLight","set","updateWorldMatrix","object","dispose","font","parse","gameOver","GameOverRegular","size","height","TargetText","useMemo","Enemies","useRecoilValue","map","enemy","Laser","lasers","laser","id","LaserController","shipPosition","setLasers","random","velocity","attach","emissive","visible","Score","score","String","getRandomNum","min","max","floor","GameTimer","enemies","setEnemies","setLaserPositions","setScore","hitEnemies","forEach","filter","p1","p2","p3","length","abs","landsOnRectangle","enemiesArr","GamePlay","App","useState","speed","setSpeed","style","background","camera","fov","near","far","dpr","window","devicePixelRatio","shadowMap","fallback","scale","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02cd9994.chunk.js","sourcesContent":["export const ABOUT_ME = Object.freeze({\n  NAME: \"Hi, I'm Gurkaran. 🤝 \",\n  WORKING: \"Software Developer working fulltime for TD Securities. Passionate about software and using tech to make the world a better place.\",\n  MY_STORY_STRING: \"My Story\",\n  MY_STORY_EXPLAIN: \"I graduated with a Bachelors of Computer Science degree from the University of Waterloo. Before working at TD Securities, I worked (mostly interships) all over Canada and USA. My mission is to work collaboratively with others to solve real-world problems with creative and efficient tech solutions.\",\n  STRING: \"ABOUT ME\",\n});\n\n\nexport const EXPERIENCES = Object.freeze({\n  STRING: \"EXPERIENCES\",\n  LOCATION_TORONTO: \"Toronto\",\n  LOCATION_NEW_YORK: \"New York\",\n  LOCATION_NORTH_YORK: \"North York\",\n\n  TD_SECURITIES: \"TD Securities\",\n  TD_SECURITIES_OCCUPATION: \"Software Developer |||\",\n  \n\n  RYERSON_UNIVERSITY: \"Ryerson University\",\n  RYERSON_UNIVERSITY_OCCUPATION: \"Full Stack Developer\",\n  RYERSON_UNIVERSITY_LINK: \"https://sites.psychlabs.ryerson.ca/spplab/portfolio/gurkaran-singh/\",\n  RYERSON_UNIVERSITY_LINK_DOCS: \"https://docs.studysocial.media/\",\n\n  LIFION_BY_ADP: \"Lifion By ADP\",\n  LIFION_BY_ADP_OCCUPATION: \"Software Engineer/Platform Developer\",\n\n  STRATUS_360_INC: \"Stratus360 Inc.\",\n  STRATUS_360_INC_OCCUPATION: \"Full Stack Developer\",\n\n  IBI_GROUP: \"IBI Group\",\n  IBI_GROUP_OCCUPATION: \"Software Developer\"\n});\n\nexport const CONTACT_ME = Object.freeze({\n  STRING: \"CONTACT ME\",\n  EMAIL: \"Email\",\n  EMAIL_LINK: \"mailto:gs3bopar@uwaterloo.ca\",\n\n  LINKEDIN_LINK:\"https://www.linkedin.com/in/gs3bopar/\",\n  GITHUB_LINK: \"https://github.com/gs3bopar\",\n  GITHUB: \"GitHub\",\n  LINKEDIN: \"LinkedIn\"\n});\n\nexport const MODAL = Object.freeze({\n  CLOSE: \"Close\"\n})","import { EXPERIENCES, ABOUT_ME, CONTACT_ME, MODAL } from '../../constants';\nimport \"./Modal.css\";\n\n\nconst Modal = ({ enemiesHit, setEnemiesHit }) => {\n  const showHideClassName = Object.values(enemiesHit).includes(true) ? \"modal display-block\" : \"modal display-none\";\n\n  const closeAllModals = (e) => {\n    e.preventDefault();\n    setEnemiesHit(\n      {\n        [ABOUT_ME.STRING]: false,\n        [EXPERIENCES.STRING]: false,\n        [CONTACT_ME.STRING]: false\n      }\n    );\n  }\n\n  function renderDefaultMessage() {\n    if (!enemiesHit[ABOUT_ME.STRING] && !enemiesHit[EXPERIENCES.STRING] && !enemiesHit[CONTACT_ME.STRING]) {\n      return (\n        <h3>Well Done! After clicking close you will see more information to learn more about me.</h3>\n      )\n    } else {\n      return (null);\n    }\n  }\n\n  return (\n    <div className={showHideClassName}>\n\n      <section className=\"modal-main\">\n\n      {renderDefaultMessage()}\n\n      {\n      enemiesHit && enemiesHit[ABOUT_ME.STRING] &&\n        <>\n          <h2>{ABOUT_ME.NAME}</h2>\n          <h3>{ABOUT_ME.WORKING}</h3>\n          <h2>{ABOUT_ME.MY_STORY_STRING}</h2>\n          <h3>{ABOUT_ME.MY_STORY_EXPLAIN}</h3>\n        </>\n      }\n\n      {\n      enemiesHit && enemiesHit[EXPERIENCES.STRING] &&\n        <>\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n              <div className=\"td-securities\"></div>\n              {EXPERIENCES.TD_SECURITIES}\n          </h2>\n          <h3>{EXPERIENCES.TD_SECURITIES_OCCUPATION}</h3>\n        </div>\n\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n            <div className=\"tmu\"></div>\n            {EXPERIENCES.RYERSON_UNIVERSITY}\n          </h2>  \n          <h3>{EXPERIENCES.RYERSON_UNIVERSITY_OCCUPATION}</h3>\n        </div>\n\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n            <div className=\"lifion-by-adp\"></div>\n            {EXPERIENCES.LIFION_BY_ADP}\n          </h2>\n          <h3>{EXPERIENCES.LIFION_BY_ADP_OCCUPATION}</h3>\n        </div>\n\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n            <div className=\"stratus-360\"></div>\n            {EXPERIENCES.STRATUS_360_INC}\n          </h2>\n          <h3>{EXPERIENCES.STRATUS_360_INC_OCCUPATION}</h3>\n        </div>\n\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n            <div className=\"ibi-group\"></div>\n            {EXPERIENCES.IBI_GROUP}\n          </h2>\n          <h3>{EXPERIENCES.IBI_GROUP_OCCUPATION}</h3>\n        </div>\n\n        </>\n      }\n\n      {\n      enemiesHit && enemiesHit[CONTACT_ME.STRING] &&\n        <>\n          <div className='contact-Info'>\n            <a href={CONTACT_ME.LINKEDIN_LINK} target=\"_blank\" rel=\"noreferrer\">\n              <div className=\"linkedin\"></div>\n            </a>\n            <a href={CONTACT_ME.GITHUB_LINK} target=\"_blank\" rel=\"noreferrer\">\n              <div className=\"github\"></div>\n            </a>\n            <a href={CONTACT_ME.EMAIL_LINK} target=\"_blank\" rel=\"noreferrer\">\n              <div className=\"email\"></div>\n            </a>\n          </div>\n        </>\n      }\n\n        <button className='close-button' onClick={e => closeAllModals(e)}>\n          {MODAL.CLOSE}\n        </button>\n\n      </section>\n\n    </div>\n  );\n};\n\nexport default Modal;","export default __webpack_public_path__ + \"static/media/skyWithSun.5f0c1def.jpg\";","export default __webpack_public_path__ + \"static/media/heightMap.dc15f021.png\";","import * as THREE from \"three\";\nimport { useMemo, useRef } from 'react';\nimport { useFrame } from '@react-three/fiber'\nimport { vertexShader, fragmentShader } from \"../../../../shaders/shaders\";\nimport skyRoadTextureMap from '../../../../static/materials/skyWithSun.jpg'; // pz: 1; px: 2; nz: 2; ny: 1; nx: 1\nimport skyRoadHeightMap from '../../../../static/materials/heightMap.png';\nimport { useTexture } from \"@react-three/drei\";\n\nconst totalObjects = 1000;\n\nconst Particles = () => {\n  const parRef = useRef();\n  const [positions, sizes] = useMemo(() => {\n    const positions = new Float32Array(totalObjects * 3);\n    const sizes = new Float32Array(totalObjects * 3);\n\n    for (let i = 0; i < totalObjects * 3; i++) {\n      positions[i] = (Math.random() - 0.5) * 10;\n      sizes[i] = Math.random() < .03 ? 15 : 6;\n    }\n\n    return [positions, sizes];\n  }, []);\n\n  useFrame(() => {\n    parRef.current.position.z -= .0001;\n  });\n\n  return (\n    <mesh \n    ref={parRef}>\n      <points>\n        <bufferGeometry>\n          <bufferAttribute\n            attachObject={[\"attributes\", \"position\"]}\n            count={positions.length / 3}\n            itemSize={3}\n            array={positions}\n          />\n        </bufferGeometry>\n        <pointsMaterial size={0.03} />\n      </points>\n    </mesh>\n  )\n}\n\nfunction Terrain(props) {\n  // const { gl } = useThree()\n  // const mat = useRef();\n\n  // Load the heightmap image \n  const heightMap = useTexture(skyRoadHeightMap);\n  // Apply some properties to ensure it renders correctly\n  heightMap.encoding = THREE.sRGBEncoding;\n  heightMap.wrapS = THREE.RepeatWrapping;\n  heightMap.wrapT = THREE.RepeatWrapping;\n  heightMap.anisotropy = 16;\n\n  // Load the texture map\n  const textureMap = useTexture(skyRoadTextureMap);\n  // Apply some properties to ensure it renders correctly\n  textureMap.encoding = THREE.sRGBEncoding;\n  textureMap.wrapS = THREE.RepeatWrapping;\n  textureMap.wrapT = THREE.RepeatWrapping;\n  textureMap.anisotropy = 16;\n  textureMap.minFilter = THREE.LinearFilter;\n  const terrainRef = useRef();\n\n  useFrame(() => {\n    if (terrainRef.current.position.z > 350) terrainRef.current.position.z = -512;\n    else terrainRef.current.position.z += props.GAME_SPEED;\n  });\n\n  // this terrain is reversed on x y and z axis\n  return (\n    <group receiveShadow={true}>\n      <mesh\n      position={[-5,-29,-512]}\n      rotation={[-Math.PI / 2,0,0]}\n      ref={terrainRef}\n      receiveShadow\n      // visible={false}\n      >\n        <planeBufferGeometry receiveShadow args={[1024, 1024, 256, 256]} />\n        <shaderMaterial\n        receiveShadow\n          fog={true}\n          uniforms={{\n            // Feed the heightmap\n            bumpTexture: { value: heightMap },\n            // Feed the scaling constant for the heightmap\n            bumpScale: { value: 60 },\n            // Feed the texture map\n            terrainTexture: { value: textureMap },\n            color: { value: new THREE.Color( 0xffff00 ) },\n          }}\n          // Feed the shaders as strings\n          vertexShader={vertexShader}\n          fragmentShader={fragmentShader}\n          side={THREE.DoubleSide}\n        />\n      </mesh>\n      {/* <Particles /> */}\n    </group>\n  );\n}\n\nexport default Terrain;","export const vertexShader = `\n// Uniforms are data that are shared between shaders\n// The contain data that are uniform across the entire frame.\n// The heightmap and scaling constant for each point are uniforms in this respect.\n\n// A uniform to contain the heightmap image\nuniform sampler2D bumpTexture;\n// A uniform to contain the scaling constant\nuniform float bumpScale;\n\n// Varyings are variables whose values are decided in the vertext shader\n// But whose values are then needed in the fragment shader\n\n// A variable to store the height of the point\nvarying float vAmount;\n// The UV mapping coordinates of a vertex\nvarying vec2 vUV;\n\nvoid main()\n{\n    // The \"coordinates\" in UV mapping representation\n    vUV = uv;\n\n    // The heightmap data at those coordinates\n    vec4 bumpData = texture2D(bumpTexture, uv);\n\n    // height map is grayscale, so it doesn't matter if you use r, g, or b.\n    vAmount = bumpData.r;\n\n    // move the position along the normal\n    vec3 newPosition = position + normal * bumpScale * vAmount;\n\n    // Compute the position of the vertex using a standard formula\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n}\n`;\n\nexport const fragmentShader = `\n// A uniform fot the terrain texture image\nuniform sampler2D terrainTexture;\n\n// Get the varyings from the vertex shader\nvarying vec2 vUV;\n// vAmount isn't really used, but could be if necessary\nvarying float vAmount;\n\nvoid main()\n{\n    // Get the color of the fragment from the texture map\n    // at that coordinate in the UV mapping\n    gl_FragColor = texture2D(terrainTexture, vUV);\n}\n`;\n","import { atom } from \"recoil\";\n\nexport const tankPositionState = atom({\n  key: \"tankPosition\", // unique ID (with respect to other atoms/selectors)\n  default: { position: {}, rotation: {} } // default value (aka initial value)\n});\n\nexport const enemyPositionState = atom({\n  key: \"enemyPosition\", // unique ID (with respect to other atoms/selectors)\n  default: [\n    { x: -20, y: -2, z: -70, text: \"Shoot Here!\" },\n    // { x: 5, y: .6, z: -90, text: \"Aim. Click. Shoot\" },\n    // { x: -4, y: 10, z: -120, text: \"Aim. Click. Shoot\" }\n    // { x: -40, y: 4.5, z: -130, text: \"RESUME\" }\n  ] // default value (aka initial value)\n});\n\nexport const laserPositionState = atom({\n  key: \"laserPositions\", // unique ID (with respect to other atoms/selectors)\n  default: [] // default value (aka initial value)\n});\n\nexport const scoreState = atom({\n  key: \"score\", // unique ID (with respect to other atoms/selectors)\n  default: 0 // default value (aka initial value)\n});","import * as THREE from \"three\";\nimport { useRef, useEffect } from 'react';\nimport { useFrame } from '@react-three/fiber'\nimport { useFBX } from \"@react-three/drei\";\nimport { useRecoilState } from \"recoil\";\nimport { tankPositionState } from \"../../../../gameState\";\n\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nfunction TankModel(props) {\n  const tank = useRef();\n  // const { nodes, materials } = useGLTF('/personal-portfolio/tank.glb');\n  const fbx = useFBX('/portfolio/models/tank.fbx');\n  const [tankPosition, setTankPosition] = useRecoilState(tankPositionState);\n\n  useFrame(({ mouse }) => {\n    setTankPosition({\n      position: {\n        x: mouse.x,\n        y: mouse.y\n      },\n      rotation: {\n        z: -mouse.x * 0.5,\n        x: mouse.x * 0.5,\n        y: mouse.y * 0.2\n      }\n    });\n  });\n\n  useFrame(() => {\n    // tank.current.rotation.z = tankPosition.rotation.z;\n    // tank.current.rotation.y = tankPosition.rotation.x;\n    // tank.current.rotation.x = tankPosition.rotation.y;\n    // tank.current.position.y = tankPosition.position.y;\n    // tank.current.position.x = tankPosition.position.x;\n    // fbx.children[7].rotation.z = tankPosition.rotation.z;\n    fbx.children[8].rotation.z = tankPosition.rotation.z;\n    fbx.children[8].rotation.y = tankPosition.rotation.y;\n  });\n\n  // Material.003 gun center parts\n  // Material.002\n  useEffect(() => {\n    fbx.traverse(child => {\n      if (child.isMesh) {\n        child.material = new THREE.MeshLambertMaterial({ color: '#32FFB8'});\n      }\n    })\n    var pointLight =  new THREE.PointLight(0xf44336, 4, 100);\n    pointLight.position.set(0,0,15);\n    fbx.children[1] = pointLight;\n    fbx.children[2] = new THREE.PointLight(0xffffff, 0, 100); // white\n    fbx.children[3] = new THREE.PointLight(0xf44336, 0, 100); // red\n    fbx.children[4] = new THREE.PointLight(0x8fce00, 0, 100); // green\n    fbx.children[7] = new THREE.Mesh();\n    fbx.updateWorldMatrix(true);\n  }, []);\n\n  return (\n    <>\n    <group ref={tank} {...props} receiveShadow={true}>\n      <primitive object={fbx} dispose={false} />\n    </group>\n\n     \n       {/* <mesh visible>\n         <boxBufferGeometry args={[1,1,1]} />\n         <meshPhongMaterial color={'white'} />\n         <meshStandardMaterial\n           attach=\"material\"\n           color=\"white\"\n           roughness={1}\n           metalness={0}\n         /> \n     </mesh> */}\n      {/* Main body */}\n      {/* <mesh\n        geometry={nodes.Cube.geometry}\n        material={nodes.Cube.material}\n        scale={[1.12173486, 0.85714293, 0.8402164]}\n      /> */}\n      {/* top shield for tires */}\n      {/* <mesh\n        geometry={nodes.Cube001.geometry}\n        material={nodes.Cube001.material}\n        position={[0, 0.05469192, 0]}\n        scale={0.80000001}\n      /> */}\n      {/* Top of the tank */}\n      {/* <group position={[0, 0.59999996, 0.1]}>\n        <mesh\n          geometry={nodes.Circle_1.geometry}\n          material={nodes.Circle_1.material}\n        />\n        <mesh\n          geometry={nodes.Circle_2.geometry}\n          material={materials[\"Material.002\"]}\n        />\n      </group> */}\n      {/* In between gun parts */}\n      {/* <mesh\n        geometry={nodes.Circle001.geometry}\n        material={nodes.Circle001.material}\n        position={[0, 1.06455553, 0.89632851]}\n        scale={0.20147002}\n      /> */}\n\n      {/* 1. outside tire rubber */}\n      {/* 2. Inner wheel i.e. rims */}\n      {/* <group position={[0, 0.05469192, 0]}>\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials[\"Material.004\"]}\n        />\n        <mesh\n          geometry={nodes.Cylinder_2.geometry}\n          material={nodes.Cylinder_2.material}\n        />\n      </group>\n      <group position={[0, 0.05469192, -1.5]}>\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials[\"Material.004\"]}\n        />\n        <mesh\n          geometry={nodes.Cylinder_2.geometry}\n          material={nodes.Cylinder_2.material}\n        />\n      </group>\n      <group position={[-2.70, 0.05469192, -1.5]}>\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials[\"Material.004\"]}\n        />\n        <mesh\n          geometry={nodes.Cylinder_2.geometry}\n          material={nodes.Cylinder_2.material}\n        />\n      </group>\n      <group position={[-2.70, 0.05469192, 0]}>\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials[\"Material.004\"]}\n        />\n        <mesh\n          geometry={nodes.Cylinder_2.geometry}\n          material={nodes.Cylinder_2.material}\n        />\n      </group> */}\n      </>\n  );\n}\n\nexport default TankModel;","import * as THREE from \"three\";\nimport gameOver from '../../../static/fonts/Game_Over_Regular.json';\n\nconst font = new THREE.FontLoader().parse(gameOver);\n\nconst GameOverRegular = ({ text, size, height }) => {\n  return (\n    <textGeometry args={[text, {\n      font: font,\n      size: size,\n      height: height,\n    }]} />\n  )\n}\n\nexport default GameOverRegular;","import { useMemo } from 'react';\nimport { useRecoilValue } from \"recoil\";\nimport GameOverRegular from '../../../Font/GameOverRegular/GameOverRegular';\nimport {\n  enemyPositionState,\n} from \"../../../../gameState\";\n\nconst TargetText = ({text}) => {\n  const targetText = useMemo(() =>\n    (<mesh>\n      <GameOverRegular text={text} size={8} height={.09} />\n      <meshBasicMaterial color={'#A7E82E'} />\n    </mesh>)\n  , [text]);\n\n  return targetText;\n}\n\nfunction Enemies() {\n  const enemies = useRecoilValue(enemyPositionState);\n\n  return (\n    enemies.map((enemy) => (\n      <group\n        position={[enemy.x, enemy.y, enemy.z]}\n        key={enemy.text}\n      >\n        <TargetText text={enemy.text} />\n      </group>\n    ))\n  )\n}\n\nexport default Enemies;","import { useRecoilValue } from \"recoil\";\nimport {\n  laserPositionState,\n} from \"../../../../../gameState\";\n\nfunction Laser() {\n  const lasers = useRecoilValue(laserPositionState);\n\n  return (\n    <group receiveShadow={false}>\n      {lasers.map((laser) => (\n        <mesh receiveShadow={false} position={[laser.x, laser.y, laser.z]} key={`${laser.id}`}>\n          <sphereBufferGeometry args={[1, 32, 16]} />\n          <meshBasicMaterial color={'#FFFF41'}/>\n        </mesh>\n      ))}\n    </group>\n  );\n}\n\nexport default Laser;","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  laserPositionState,\n  tankPositionState\n} from \"../../../../../gameState\";\n\n\nfunction LaserController() {\n  const shipPosition = useRecoilValue(tankPositionState);\n  const [lasers, setLasers] = useRecoilState(laserPositionState);\n  return (\n    <mesh\n      // position={[0,-20,0]}\n      onClick={() =>\n        setLasers([\n          ...lasers,\n          {\n            id: Math.random(),\n            x: shipPosition.position.x,\n            y: -3.8,\n            z: -5,\n            velocity: [shipPosition.rotation.x * 2, shipPosition.rotation.y * 2]\n          }\n        ])\n      }\n    >\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color=\"orange\"\n        emissive=\"#ff0860\"\n        visible={false}\n      />\n    </mesh>\n  );\n}\nexport default LaserController;\n","import { useRecoilState } from \"recoil\";\nimport { scoreState } from \"../../../../gameState\";\nimport GameOverRegular from \"../../../Font/GameOverRegular/GameOverRegular\";\n\nfunction Score() {\n  const [score, ] = useRecoilState(scoreState);\n  return (\n    <group position={[-.32,-3.17,1]}>\n      <mesh>\n        <GameOverRegular text={String(score)} size={2} height={.09} />\n        <meshBasicMaterial color={'#428bff'} />\n      </mesh>\n    </group>\n  );\n}\n\nexport default Score;","\n/*\n  Optimal values for positioning enemies\n  x: -20 to 5\n  y: -3 to 8\n  z: -60 to 120\n */\nexport function getRandomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function landsOnRectangle(p1, p2) {\n  // const a = p2.x - p1.x;\n  // const b = p2.y - p1.y;\n  // const c = p2.z - p1.z;\n  // return Math.sqrt(a * a + b * b + c * c);\n  // bottom right\n  const p3 = {\n    x: p2.x + p2.text.length * 3,\n    y: p2.y\n  }\n\n  // p2: bottom left\n  // top right\n  // const p3 = {\n  //   x: p2.x + p2.text.length * 2,\n  //   y: p2.y - 3\n  // }\n  // console.log(\"p1: \", p1); // check if this point is inside rect\n  // console.log(\"p2: \", p2);\n  // console.log(\"p3: \", p3);\n\n  // when p2 is top left and p3 is bottom right\n  const val =  p1.x > p2.x && p1.x < p3.x && p1.y < (p2.y + 3) && p1.y > p3.y;\n  // console.log(Math.abs(p1.z - p2.z));\n  return val && Math.abs(p1.z - p2.z) < 1;\n}\n","import Enemies from \"./Enemies/Enemies\";\nimport Laser from \"./Lasers/Laser/Laser\";\nimport LaserController from \"./Lasers/LaserController/LaserController\";\nimport Score from \"./Score/Score\";\nimport { useFrame } from '@react-three/fiber'\nimport { useRecoilState } from \"recoil\";\nimport {\n  enemyPositionState,\n  laserPositionState,\n  scoreState\n} from \"../../../gameState\";\nimport { getRandomNum, landsOnRectangle } from \"../../../utils\";\n\nconst LASER_RANGE = 100;\nconst LASER_Z_VELOCITY = 1;\nconst ENEMY_SPEED = 0.1;\nconst GROUND_HEIGHT = -50;\n\n\nfunction GameTimer({ setEnemiesHit }) {\n  const [enemies, setEnemies] = useRecoilState(enemyPositionState);\n  const [lasers, setLaserPositions] = useRecoilState(laserPositionState);\n  const [score, setScore] = useRecoilState(scoreState);\n\n  useFrame(({ mouse }) => {\n\n    const hitEnemies = {};\n    enemies.forEach((enemy) => {\n      hitEnemies[enemy.text] = lasers.filter(() => lasers.filter((laser) => landsOnRectangle(laser, enemy) === true).length > 0).length > 0;\n    });\n\n    // for modal\n    if (Object.values(hitEnemies).includes(true)) {\n      setEnemiesHit(hitEnemies);\n      setScore(score + 1);\n    }\n\n    // Move all of the enemies. Remove enemies that have been destroyed, or passed the player.\n    // const enemiesArr = [\"ABOUT ME\", \"EXPERIENCES\"];\n    let enemiesArr = enemies\n    .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z + ENEMY_SPEED, text: enemy.text }))\n    .filter((enemy) => !hitEnemies[enemy.text] && enemy.z < 0);    \n\n    // reset the enemeies again\n    if (enemiesArr.length === 0) {\n      setEnemies([\n        { x: getRandomNum(-30, -10), y: getRandomNum(-3, 0), z: getRandomNum(-120, -90), text: \"ABOUT ME\" },\n        { x: getRandomNum(-10, -1), y: getRandomNum(0, 4), z: getRandomNum(-90, -75), text: \"EXPERIENCES\" },\n        { x: getRandomNum(0, 5), y: getRandomNum(4, 8), z: getRandomNum(-74, -50), text: \"CONTACT ME\" }\n        // { x: -40, y: 4.5, z: -130, text: \"RESUME\"}\n      ]);\n    } else setEnemies(enemiesArr);\n\n    // setEnemies(enemiesArr);\n    // Move the Lasers and remove lasers at end of range or that have hit the ground.\n    setLaserPositions(\n      lasers\n        .map((laser) => ({\n          id: laser.id,\n          x: laser.x + laser.velocity[0],\n          y: laser.y + laser.velocity[1],\n          z: laser.z - LASER_Z_VELOCITY,\n          velocity: laser.velocity\n        }))\n        .filter((laser) => laser.z > -LASER_RANGE && laser.y > GROUND_HEIGHT)\n    );\n  });\n  return null;\n}\n\n\nconst GamePlay = ({ setEnemiesHit }) => {\n  return (\n    <>\n      <Enemies />\n      <Laser />\n      <LaserController />\n      <GameTimer \n        setEnemiesHit={setEnemiesHit}\n      />\n      <Score />\n    </>\n  )\n}\n\nexport default GamePlay;","import { Canvas } from '@react-three/fiber'\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { RecoilRoot } from \"recoil\";\nimport Modal from './Modal/Modal';\nimport { EXPERIENCES, ABOUT_ME, CONTACT_ME } from '../constants';\nimport Terrain from \"./Game/Props/Terrain/Terrain\";\nimport TankModel from \"./Game/Props/TankModel/TankModel\";\nimport GamePlay from \"./Game/GamePlay/GamePlay\";\n// import { OrbitControls } from \"@react-three/drei\";\n\nconst App = () => {\n  const ref = useRef();\n  const [speed, setSpeed] = useState(0.06);\n  const [enemiesHit, setEnemiesHit] = useState({\n    [ABOUT_ME.STRING]: false,\n    [EXPERIENCES.STRING]: false,\n    [CONTACT_ME.STRING]: false,\n  });\n\n  useEffect(() => {\n    if (Object.values(enemiesHit).includes(true)) setSpeed(0.02);\n    else setSpeed(0.2);\n  }, [enemiesHit])\n\n  return (\n    <>\n    <Canvas\n      style={{ background: \"#cdf9ff\" }}\n      camera={{ fov: 75, near: 0.1, far: 1000, position: [0, 2, 5] }}\n      dpr={Math.max(window.devicePixelRatio, 2)}\n      ref={ref}\n      shadowMap\n    >\n    <RecoilRoot>\n      <Terrain GAME_SPEED={speed}/>\n      <Suspense fallback={null}>\n        <TankModel\n          scale={[.008,.008,.008]}\n          position={[0,-3,0]}\n          rotation={[0,Math.PI,0]}\n        />\n      </Suspense>\n      <GamePlay setEnemiesHit={setEnemiesHit} />\n      {/* <OrbitControls /> */}\n    </RecoilRoot>\n  </Canvas>\n    {\n        <Modal enemiesHit={enemiesHit} setEnemiesHit={setEnemiesHit}></Modal>\n    }\n    </>\n  )\n}\n\nexport default App;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App/App';\n\nReactDOM.render(\n  <Suspense fallback={null}>\n    <App />,\n  </Suspense>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}