{"version":3,"sources":["gameState.js","static/materials/skyWithSun.jpg","static/materials/heightMap.png","constants.js","App/Modal/Modal.jsx","utils.js","App/App.jsx","shaders/shaders.js","index.js"],"names":["tankPositionState","atom","key","default","position","rotation","enemyPositionState","x","y","z","text","laserPositionState","scoreState","ABOUT_ME","Object","freeze","NAME","WORKING","MY_STORY_STRING","MY_STORY_EXPLAIN","STRING","EXPERIENCES","LOCATION_TORONTO","LOCATION_NEW_YORK","LOCATION_NORTH_YORK","TD_SECURITIES","TD_SECURITIES_OCCUPATION","RYERSON_UNIVERSITY","RYERSON_UNIVERSITY_OCCUPATION","RYERSON_UNIVERSITY_LINK","RYERSON_UNIVERSITY_LINK_DOCS","LIFION_BY_ADP","LIFION_BY_ADP_OCCUPATION","STRATUS_360_INC","STRATUS_360_INC_OCCUPATION","IBI_GROUP","IBI_GROUP_OCCUPATION","CONTACT_ME","EMAIL","EMAIL_LINK","LINKEDIN_LINK","GITHUB_LINK","GITHUB","LINKEDIN","MODAL","CLOSE","Modal","enemiesHit","setEnemiesHit","showHideClassName","values","includes","className","href","target","rel","onClick","e","preventDefault","closeAllModals","getRandomNum","min","max","Math","floor","random","font","THREE","parse","gameOver","textOptions","size","height","Model","props","tank","useRef","fbx","useFBX","useRecoilState","tankPosition","setTankPosition","useFrame","mouse","children","useEffect","traverse","child","isMesh","material","color","pointLight","set","updateWorldMatrix","ref","receiveShadow","object","dispose","Terrain","heightMap","useTexture","skyRoadHeightMap","encoding","wrapS","wrapT","anisotropy","textureMap","skyRoadTextureMap","minFilter","terrainRef","current","GAME_SPEED","PI","args","fog","uniforms","bumpTexture","value","bumpScale","terrainTexture","vertexShader","fragmentShader","TargetText","useMemo","Enemies","useRecoilValue","map","enemy","Lasers","lasers","laser","id","LaserController","shipPosition","setLasers","velocity","attach","emissive","visible","GameTimer","enemies","setEnemies","setLaserPositions","score","setScore","hitEnemies","forEach","filter","p1","p2","p3","length","abs","landsOnRectangle","enemiesArr","DisplayScore","String","App","useState","speed","setSpeed","style","background","camera","fov","near","far","dpr","window","devicePixelRatio","shadowMap","fallback","scale","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f5ee6e3.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const tankPositionState = atom({\n  key: \"tankPosition\", // unique ID (with respect to other atoms/selectors)\n  default: { position: {}, rotation: {} } // default value (aka initial value)\n});\n\nexport const enemyPositionState = atom({\n  key: \"enemyPosition\", // unique ID (with respect to other atoms/selectors)\n  default: [\n    { x: -20, y: -2, z: -70, text: \"ABOUT ME\" },\n    { x: 5, y: .6, z: -90, text: \"EXPERIENCES\" },\n    { x: -4, y: 10, z: -120, text: \"CONTACT ME\" }\n    // { x: -40, y: 4.5, z: -130, text: \"RESUME\" }\n  ] // default value (aka initial value)\n});\n\nexport const laserPositionState = atom({\n  key: \"laserPositions\", // unique ID (with respect to other atoms/selectors)\n  default: [] // default value (aka initial value)\n});\n\nexport const scoreState = atom({\n  key: \"score\", // unique ID (with respect to other atoms/selectors)\n  default: 0 // default value (aka initial value)\n});","export default __webpack_public_path__ + \"static/media/skyWithSun.5f0c1def.jpg\";","export default __webpack_public_path__ + \"static/media/heightMap.dc15f021.png\";","export const ABOUT_ME = Object.freeze({\n  NAME: \"Hi, I'm Gurkaran. 🤝 \",\n  WORKING: \"Software Developer working fulltime for TD Securities. Passionate about software and using tech to make the world a better place.\",\n  MY_STORY_STRING: \"My Story\",\n  MY_STORY_EXPLAIN: \"I graduated with a Bachelors of Computer Science degree from the University of Waterloo. Before working at TD Securities, I worked (mostly interships) all over Canada and USA. My mission is to work collaboratively with others to solve real-world problems with creative and efficient tech solutions.\",\n  STRING: \"ABOUT ME\",\n});\n\n\nexport const EXPERIENCES = Object.freeze({\n  STRING: \"EXPERIENCES\",\n  LOCATION_TORONTO: \"Toronto\",\n  LOCATION_NEW_YORK: \"New York\",\n  LOCATION_NORTH_YORK: \"North York\",\n\n  TD_SECURITIES: \"TD Securities\",\n  TD_SECURITIES_OCCUPATION: \"Software Developer |||\",\n  \n\n  RYERSON_UNIVERSITY: \"Ryerson University\",\n  RYERSON_UNIVERSITY_OCCUPATION: \"Full Stack Developer\",\n  RYERSON_UNIVERSITY_LINK: \"https://sites.psychlabs.ryerson.ca/spplab/portfolio/gurkaran-singh/\",\n  RYERSON_UNIVERSITY_LINK_DOCS: \"https://docs.studysocial.media/\",\n\n  LIFION_BY_ADP: \"Lifion By ADP\",\n  LIFION_BY_ADP_OCCUPATION: \"Software Engineer/Platform Developer\",\n\n  STRATUS_360_INC: \"Stratus360 Inc.\",\n  STRATUS_360_INC_OCCUPATION: \"Full Stack Developer\",\n\n  IBI_GROUP: \"IBI Group\",\n  IBI_GROUP_OCCUPATION: \"Software Developer\"\n});\n\nexport const CONTACT_ME = Object.freeze({\n  STRING: \"CONTACT ME\",\n  EMAIL: \"Email\",\n  EMAIL_LINK: \"mailto:gs3bopar@uwaterloo.ca\",\n\n  LINKEDIN_LINK:\"https://www.linkedin.com/in/gs3bopar/\",\n  GITHUB_LINK: \"https://github.com/gs3bopar\",\n  GITHUB: \"GitHub\",\n  LINKEDIN: \"LinkedIn\"\n});\n\nexport const MODAL = Object.freeze({\n  CLOSE: \"Close\"\n})","import { EXPERIENCES, ABOUT_ME, CONTACT_ME, MODAL } from '../../constants';\nimport \"./Modal.css\";\n\n\nconst Modal = ({ enemiesHit, setEnemiesHit }) => {\n  const showHideClassName = Object.values(enemiesHit).includes(true) ? \"modal display-block\" : \"modal display-none\";\n\n  const closeAllModals = (e) => {\n    e.preventDefault();\n    setEnemiesHit(\n      {\n        [ABOUT_ME.STRING]: false,\n        [EXPERIENCES.STRING]: false,\n        [CONTACT_ME.STRING]: false\n      }\n    );\n  }\n\n  // useEffect(() => {\n  //   // more than one true, choose first one to be true else all false\n  //   for (const [key, value] in Object.entries(enemiesHit)) {\n  //   }\n  // }, []);\n\n  return (\n    <div className={showHideClassName}>\n\n      <section className=\"modal-main\">\n      {\n      enemiesHit && enemiesHit[ABOUT_ME.STRING] &&\n        <>\n          <h2>{ABOUT_ME.NAME}</h2>\n          <h3>{ABOUT_ME.WORKING}</h3>\n          <h2>{ABOUT_ME.MY_STORY_STRING}</h2>\n          <h3>{ABOUT_ME.MY_STORY_EXPLAIN}</h3>\n        </>\n      }\n\n      {\n      enemiesHit && enemiesHit[EXPERIENCES.STRING] &&\n        <>\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n              <div className=\"td-securities\"></div>\n              {EXPERIENCES.TD_SECURITIES}\n          </h2>\n          <h3>{EXPERIENCES.TD_SECURITIES_OCCUPATION}</h3>\n        </div>\n\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n            <div className=\"tmu\"></div>\n            {EXPERIENCES.RYERSON_UNIVERSITY}\n          </h2>  \n          <h3>{EXPERIENCES.RYERSON_UNIVERSITY_OCCUPATION}</h3>\n        </div>\n\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n            <div className=\"lifion-by-adp\"></div>\n            {EXPERIENCES.LIFION_BY_ADP}\n          </h2>\n          <h3>{EXPERIENCES.LIFION_BY_ADP_OCCUPATION}</h3>\n        </div>\n\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n            <div className=\"stratus-360\"></div>\n            {EXPERIENCES.STRATUS_360_INC}\n          </h2>\n          <h3>{EXPERIENCES.STRATUS_360_INC_OCCUPATION}</h3>\n        </div>\n\n        <div className='sameLineFlex'>\n          <h2 className='company-logos'>\n            <div className=\"ibi-group\"></div>\n            {EXPERIENCES.IBI_GROUP}\n          </h2>\n          <h3>{EXPERIENCES.IBI_GROUP_OCCUPATION}</h3>\n        </div>\n\n        </>\n      }\n\n      {\n      enemiesHit && enemiesHit[CONTACT_ME.STRING] &&\n        <>\n          <div className='contact-Info'>\n            <a href={CONTACT_ME.LINKEDIN_LINK} target=\"_blank\" rel=\"noreferrer\">\n              <div className=\"linkedin\"></div>\n            </a>\n            <a href={CONTACT_ME.GITHUB_LINK} target=\"_blank\" rel=\"noreferrer\">\n              <div className=\"github\"></div>\n            </a>\n            <a href={CONTACT_ME.EMAIL_LINK} target=\"_blank\" rel=\"noreferrer\">\n              <div className=\"email\"></div>\n            </a>\n          </div>\n        </>\n      }\n\n        <button className='close-button' onClick={e => closeAllModals(e)}>\n          {MODAL.CLOSE}\n        </button>\n\n      </section>\n\n    </div>\n  );\n};\n\nexport default Modal;","\n/*\n  Optimal values for positioning enemies\n  x: -20 to 5\n  y: -3 to 8\n  z: -60 to 120\n */\nexport function getRandomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nexport function landsOnRectangle(p1, p2) {\n  // const a = p2.x - p1.x;\n  // const b = p2.y - p1.y;\n  // const c = p2.z - p1.z;\n  // return Math.sqrt(a * a + b * b + c * c);\n  // bottom right\n  const p3 = {\n    x: p2.x + p2.text.length * 3,\n    y: p2.y\n  }\n\n  // p2: bottom left\n  // top right\n  // const p3 = {\n  //   x: p2.x + p2.text.length * 2,\n  //   y: p2.y - 3\n  // }\n  // console.log(\"p1: \", p1); // check if this point is inside rect\n  // console.log(\"p2: \", p2);\n  // console.log(\"p3: \", p3);\n\n  // when p2 is top left and p3 is bottom right\n  const val =  p1.x > p2.x && p1.x < p3.x && p1.y < (p2.y + 3) && p1.y > p3.y;\n  // console.log(Math.abs(p1.z - p2.z));\n  return val && Math.abs(p1.z - p2.z) < 1;\n}\n","import { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { Suspense, useEffect, useRef, useMemo, useState } from 'react';\nimport { \n  useFBX,\n  useTexture,\n} from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport { RecoilRoot, useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  tankPositionState,\n  enemyPositionState,\n  laserPositionState,\n  scoreState\n} from \"../gameState\";\nimport gameOver from '../static/fonts/Game_Over_Regular.json';\nimport { vertexShader, fragmentShader } from \"../shaders/shaders\";\nimport skyRoadTextureMap from '../static/materials/skyWithSun.jpg' // pz: 1; px: 2; nz: 2; ny: 1; nx: 1\nimport skyRoadHeightMap from '../static/materials/heightMap.png'\nimport Modal from './Modal/Modal';\nimport { EXPERIENCES, ABOUT_ME, CONTACT_ME } from '../constants';\nimport { getRandomNum, landsOnRectangle } from \"../utils\";\n\nconst LASER_RANGE = 100;\nconst LASER_Z_VELOCITY = 1;\nconst ENEMY_SPEED = 0.1;\nconst GROUND_HEIGHT = -50;\nconst font = new THREE.FontLoader().parse(gameOver);\nconst textOptions = {\n    font: font,\n\t\tsize: 8,\n\t\theight: .09,\n};\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nfunction Model(props) {\n  const tank = useRef();\n  // const { nodes, materials } = useGLTF('/personal-portfolio/tank.glb');\n  const fbx = useFBX('/portfolio/models/tank.fbx');\n  const [tankPosition, setTankPosition] = useRecoilState(tankPositionState);\n\n  useFrame(({ mouse }) => {\n    setTankPosition({\n      position: {\n        x: mouse.x,\n        y: mouse.y\n      },\n      rotation: {\n        z: -mouse.x * 0.5,\n        x: mouse.x * 0.5,\n        y: mouse.y * 0.2\n      }\n    });\n  });\n\n  useFrame(() => {\n    // tank.current.rotation.z = tankPosition.rotation.z;\n    // tank.current.rotation.y = tankPosition.rotation.x;\n    // tank.current.rotation.x = tankPosition.rotation.y;\n    // tank.current.position.y = tankPosition.position.y;\n    // tank.current.position.x = tankPosition.position.x;\n    // fbx.children[7].rotation.z = tankPosition.rotation.z;\n    fbx.children[8].rotation.z = tankPosition.rotation.z;\n    // fbx.children[8].rotation.y = tankPosition.rotation.x;\n  });\n\n  // Material.003 gun center parts\n  // Material.002\n  useEffect(() => {\n    fbx.traverse(child => {\n      if (child.isMesh) {\n        child.material = new THREE.MeshLambertMaterial({ color: '#32FFB8'});\n      }\n    })\n    var pointLight =  new THREE.PointLight(0xf44336, 4, 100);\n    pointLight.position.set(0,0,15);\n    fbx.children[1] = pointLight;\n    fbx.children[2] = new THREE.PointLight(0xffffff, 0, 100); // white\n    fbx.children[3] = new THREE.PointLight(0xf44336, 0, 100); // red\n    fbx.children[4] = new THREE.PointLight(0x8fce00, 0, 100); // green\n    fbx.children[7] = new THREE.Mesh();\n    fbx.updateWorldMatrix(true);\n  }, []);\n\n  return (\n    <>\n    <group ref={tank} {...props} receiveShadow={true}>\n      <primitive object={fbx} dispose={false} />\n    </group>\n\n     \n       {/* <mesh visible>\n         <boxBufferGeometry args={[1,1,1]} />\n         <meshPhongMaterial color={'white'} />\n         <meshStandardMaterial\n           attach=\"material\"\n           color=\"white\"\n           roughness={1}\n           metalness={0}\n         /> \n     </mesh> */}\n      {/* Main body */}\n      {/* <mesh\n        geometry={nodes.Cube.geometry}\n        material={nodes.Cube.material}\n        scale={[1.12173486, 0.85714293, 0.8402164]}\n      /> */}\n      {/* top shield for tires */}\n      {/* <mesh\n        geometry={nodes.Cube001.geometry}\n        material={nodes.Cube001.material}\n        position={[0, 0.05469192, 0]}\n        scale={0.80000001}\n      /> */}\n      {/* Top of the tank */}\n      {/* <group position={[0, 0.59999996, 0.1]}>\n        <mesh\n          geometry={nodes.Circle_1.geometry}\n          material={nodes.Circle_1.material}\n        />\n        <mesh\n          geometry={nodes.Circle_2.geometry}\n          material={materials[\"Material.002\"]}\n        />\n      </group> */}\n      {/* In between gun parts */}\n      {/* <mesh\n        geometry={nodes.Circle001.geometry}\n        material={nodes.Circle001.material}\n        position={[0, 1.06455553, 0.89632851]}\n        scale={0.20147002}\n      /> */}\n\n      {/* 1. outside tire rubber */}\n      {/* 2. Inner wheel i.e. rims */}\n      {/* <group position={[0, 0.05469192, 0]}>\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials[\"Material.004\"]}\n        />\n        <mesh\n          geometry={nodes.Cylinder_2.geometry}\n          material={nodes.Cylinder_2.material}\n        />\n      </group>\n      <group position={[0, 0.05469192, -1.5]}>\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials[\"Material.004\"]}\n        />\n        <mesh\n          geometry={nodes.Cylinder_2.geometry}\n          material={nodes.Cylinder_2.material}\n        />\n      </group>\n      <group position={[-2.70, 0.05469192, -1.5]}>\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials[\"Material.004\"]}\n        />\n        <mesh\n          geometry={nodes.Cylinder_2.geometry}\n          material={nodes.Cylinder_2.material}\n        />\n      </group>\n      <group position={[-2.70, 0.05469192, 0]}>\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials[\"Material.004\"]}\n        />\n        <mesh\n          geometry={nodes.Cylinder_2.geometry}\n          material={nodes.Cylinder_2.material}\n        />\n      </group> */}\n      </>\n  );\n}\n\n// const Terrain = () => {\n//   const terrainRef = useRef();\n\n//   useFrame(() => {\n//     terrainRef.current.position.z += 0.4;\n//   });\n\n//   return(\n//     <mesh\n//       visible\n//       position={[0,-100,0]}\n//       rotation={[-Math.PI / 2, 0, 0]}\n//       ref={terrainRef}\n//     >\n//       <planeBufferGeometry attach=\"geometry\" args={[5000, 5000, 128, 128]} />\n//       <meshStandardMaterial\n//         attach=\"material\"\n//         color=\"white\"\n//         roughness={1}\n//         metalness={0}\n//         wireframe\n//       />\n//     </mesh>\n//   );\n// };\n\nfunction Terrain(props) {\n  // const { gl } = useThree()\n  // const mat = useRef();\n\n  // Load the heightmap image \n  const heightMap = useTexture(skyRoadHeightMap);\n  // Apply some properties to ensure it renders correctly\n  heightMap.encoding = THREE.sRGBEncoding;\n  heightMap.wrapS = THREE.RepeatWrapping;\n  heightMap.wrapT = THREE.RepeatWrapping;\n  heightMap.anisotropy = 16;\n\n  // Load the texture map\n  const textureMap = useTexture(skyRoadTextureMap);\n  // Apply some properties to ensure it renders correctly\n  textureMap.encoding = THREE.sRGBEncoding;\n  textureMap.wrapS = THREE.RepeatWrapping;\n  textureMap.wrapT = THREE.RepeatWrapping;\n  textureMap.anisotropy = 16;\n  textureMap.minFilter = THREE.LinearFilter;\n  const terrainRef = useRef();\n\n  useFrame(() => {\n    if (terrainRef.current.position.z > 350) terrainRef.current.position.z = -512;\n    else terrainRef.current.position.z += props.GAME_SPEED;\n  });\n\n  // this terrain is reversed on x y and z axis\n  return (\n    <group receiveShadow={true}>\n      <mesh\n      position={[-5,-29,-512]}\n      rotation={[-Math.PI / 2,0,0]}\n      ref={terrainRef}\n      receiveShadow\n      // visible={false}\n      >\n        <planeBufferGeometry receiveShadow args={[1024, 1024, 256, 256]} />\n        <shaderMaterial\n        receiveShadow\n          fog\n          uniforms={{\n            // Feed the heightmap\n            bumpTexture: { value: heightMap },\n            // Feed the scaling constant for the heightmap\n            bumpScale: { value: 60 },\n            // Feed the texture map\n            terrainTexture: { value: textureMap },\n            fog: true,\n            // lights: {\n            //   ambientLight\n            // }\n          }}\n          // Feed the shaders as strings\n          vertexShader={vertexShader}\n          fragmentShader={fragmentShader}\n          // side={THREE.DoubleSide}\n        />\n      </mesh>\n    </group>\n  );\n}\n\nconst Target = (props) => {\n  return (\n    <group\n    // position={props.position}\n    receiveShadow={true}\n    >\n      <mesh\n        receiveShadow={true} \n        position={[props.position[0], props.position[1] + 15, props.position[2]]}\n      >\n        <planeGeometry args={[30,20]} />\n        <meshBasicMaterial color={\"pink\"} side={THREE.FrontSide} />\n        {/* <TargetText text={props.text} /> */}\n      </mesh>\n      <mesh\n        receiveShadow={true}\n        position={[props.position[0], props.position[1], props.position[2]]}\n      >\n        <cylinderBufferGeometry args={[1, 1, 15, 50, 1]} />\n        <meshBasicMaterial color={\"pink\"} side={THREE.FrontSide}/>\n      </mesh>\n    </group>\n  )\n}\n\n\n// billboard\n// const Target = (props) => {\n//   // const target = useRef();\n//   // const font = new THREE.FontLoader().parse(gameOver);\n\n//   return (\n//     <group \n//       position={props.position}\n//     >\n//       <Billboard follow={true} lockX={false} lockY={false} lockZ={false} position={[0, 0, 0]}>\n//         {/* <Plane args={[3, 2]} material-color=\"green\" /> */}\n//         <Text fontSize={5} outlineWidth={'5%'} outlineColor=\"#000000\" outlineOpacity={1}>\n//           ABOUT ME\n//         </Text>\n//       </Billboard>\n//     </group>\n//   )\n// }\n\nconst TargetText = ({text}) => {\n  const targetText = useMemo(() => \n    (<mesh>\n      <textGeometry args={[text, textOptions]} />\n      <meshBasicMaterial color={'#A7E82E'} />\n    </mesh>)\n  , [text]);\n\n  return targetText;\n}\n\nfunction Enemies() {\n  const enemies = useRecoilValue(enemyPositionState);\n\n  return (\n    enemies.map((enemy) => (\n      <group\n        position={[enemy.x, enemy.y, enemy.z]}\n      >\n        <TargetText text={enemy.text} key={enemy.text}/>\n      </group>\n    ))\n  )\n}\n\nfunction Lasers() {\n  const lasers = useRecoilValue(laserPositionState);\n\n  return (\n    <group receiveShadow={false}>\n      {lasers.map((laser) => (\n        <mesh receiveShadow={false} position={[laser.x, laser.y, laser.z]} key={`${laser.id}`}>\n          <sphereBufferGeometry args={[1, 32, 16]} />\n          <meshBasicMaterial color={'#FFFF41'}/>\n        </mesh>\n      ))}\n    </group>\n  );\n}\n\n\nfunction LaserController() {\n  const shipPosition = useRecoilValue(tankPositionState);\n  const [lasers, setLasers] = useRecoilState(laserPositionState);\n  return (\n    <mesh\n      // position={[0,-20,0]}\n      onClick={() =>\n        setLasers([\n          ...lasers,\n          {\n            id: Math.random(),\n            x: shipPosition.position.x,\n            y: -3.8,\n            z: -5,\n            velocity: [shipPosition.rotation.x * 2, shipPosition.rotation.y * 2]\n          }\n        ])\n      }\n    >\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color=\"orange\"\n        emissive=\"#ff0860\"\n        visible={false}\n      />\n    </mesh>\n  );\n}\n\nfunction GameTimer({ setEnemiesHit }) {\n  const [enemies, setEnemies] = useRecoilState(enemyPositionState);\n  const [lasers, setLaserPositions] = useRecoilState(laserPositionState);\n  const [score, setScore] = useRecoilState(scoreState);\n\n  useFrame(({ mouse }) => {\n\n    const hitEnemies = {};\n    enemies.forEach((enemy) => {\n      hitEnemies[enemy.text] = lasers.filter(() => lasers.filter((laser) => landsOnRectangle(laser, enemy) === true).length > 0).length > 0;\n    });\n\n    // for modal\n    if (Object.values(hitEnemies).includes(true)) {\n      setEnemiesHit(hitEnemies);\n      setScore(score + 1);\n    }\n\n    // Move all of the enemies. Remove enemies that have been destroyed, or passed the player.\n    // const enemiesArr = [\"ABOUT ME\", \"EXPERIENCES\"];\n    let enemiesArr = enemies\n    .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z + ENEMY_SPEED, text: enemy.text }))\n    .filter((enemy) => !hitEnemies[enemy.text] && enemy.z < 0);    \n\n    // reset the enemeies again\n    if (enemiesArr.length === 0) {\n      setEnemies([\n        { x: getRandomNum(-30, -10), y: getRandomNum(-3, 0), z: getRandomNum(-120, -90), text: \"ABOUT ME\" },\n        { x: getRandomNum(-10, -1), y: getRandomNum(0, 4), z: getRandomNum(-90, -75), text: \"EXPERIENCES\" },\n        { x: getRandomNum(0, 5), y: getRandomNum(4, 8), z: getRandomNum(-74, -50), text: \"CONTACT ME\" }\n        // { x: -40, y: 4.5, z: -130, text: \"RESUME\"}\n      ]);\n    } else setEnemies(enemiesArr);\n\n    // setEnemies(enemiesArr);\n    // Move the Lasers and remove lasers at end of range or that have hit the ground.\n    setLaserPositions(\n      lasers\n        .map((laser) => ({\n          id: laser.id,\n          x: laser.x + laser.velocity[0],\n          y: laser.y + laser.velocity[1],\n          z: laser.z - LASER_Z_VELOCITY,\n          velocity: laser.velocity\n        }))\n        .filter((laser) => laser.z > -LASER_RANGE && laser.y > GROUND_HEIGHT)\n    );\n  });\n  return null;\n}\n\n\n// function Lights() {\n//   const [ref, seRef] = useState()\n//   return (\n//     <>\n//       <directionalLight\n//         ref={seRef}\n//         intensity={50}\n//         position={[5, 5, 5]}\n//         // rotation={[0,0,Math.PI]}\n//         shadow-mapSize-width={2048}\n//         shadow-mapSize-height={2048}\n//         shadow-camera-near={0.5}\n//         shadow-camera-far={500}\n//         castShadow={true}\n//       />\n//       {ref && <directionalLightHelper args={[ref, 5]} />}\n//     </>\n//   )\n// }\n\nfunction DisplayScore() {\n  const [score, setScore] = useRecoilState(scoreState);\n  return (\n    <group position={[-.32,-3.17,1]}>\n      <mesh>\n        <textGeometry args={[String(score),\n        {\n          font: font,\n\t\t      size: 2,\n\t\t      height: .09\n        }\n      ]} />\n        <meshBasicMaterial color={'#428bff'} />\n      </mesh>\n    </group>\n  );\n}\n\nconst App = () => {\n  const ref = useRef();\n  const [speed, setSpeed] = useState(0.06);\n  const [enemiesHit, setEnemiesHit] = useState({\n    [ABOUT_ME.STRING]: false,\n    [EXPERIENCES.STRING]: false,\n    [CONTACT_ME.STRING]: false\n  });\n\n  useEffect(() => {\n    if (Object.values(enemiesHit).includes(true)) setSpeed(0.02);\n    else setSpeed(0.2);\n  }, [enemiesHit])\n\n  return (\n    <>\n    <Canvas\n      style={{ background: \"#cdf9ff\" }}\n      camera={{ fov: 75, near: 0.1, far: 1000, position: [0, 2, 5] }}\n      // gl={{ antialias: false }} pixelRatio={4}\n      dpr={Math.max(window.devicePixelRatio, 2)}\n      ref={ref}\n      // onCreated={({ gl }) => {\n      //   gl.shadowMap.autoUpdate = false;\n      //   gl.shadowMap.enabled = true;\n      //   gl.shadowMap.needsUpdate = true;\n      //   gl.shadowMap.type = THREE.PCFSoftShadowMap;\n      // }}\n      shadowMap\n    >\n    {/* <Lights /> */}\n    <RecoilRoot>\n    {/* <ambientLight intensity={1} /> */}\n      <Terrain GAME_SPEED={speed}/>\n      <Suspense fallback={null}>\n        <Model\n          scale={[.008,.008,.008]}\n          position={[0,-3,0]}\n          rotation={[0,Math.PI,0]}\n        />\n      </Suspense>\n      {/* <Target position={[-20, 10, -20]} text={\"about me\"}/>\n      <Target position={[5, 10, -20]} text={\"experiences\"}/> */}\n      <Enemies />\n      <Lasers />\n      <LaserController />\n      <GameTimer \n        setEnemiesHit={setEnemiesHit}\n      />\n      <DisplayScore />\n      {/* <OrbitControls /> */}\n    </RecoilRoot>\n  </Canvas>\n    {\n        <Modal enemiesHit={enemiesHit} setEnemiesHit={setEnemiesHit}></Modal>\n    }\n    </>\n  )\n}\n\nexport default App;","export const vertexShader = `\n// Uniforms are data that are shared between shaders\n// The contain data that are uniform across the entire frame.\n// The heightmap and scaling constant for each point are uniforms in this respect.\n\n// A uniform to contain the heightmap image\nuniform sampler2D bumpTexture;\n// A uniform to contain the scaling constant\nuniform float bumpScale;\n\n// Varyings are variables whose values are decided in the vertext shader\n// But whose values are then needed in the fragment shader\n\n// A variable to store the height of the point\nvarying float vAmount;\n// The UV mapping coordinates of a vertex\nvarying vec2 vUV;\n\nvoid main()\n{\n    // The \"coordinates\" in UV mapping representation\n    vUV = uv;\n\n    // The heightmap data at those coordinates\n    vec4 bumpData = texture2D(bumpTexture, uv);\n\n    // height map is grayscale, so it doesn't matter if you use r, g, or b.\n    vAmount = bumpData.r;\n\n    // move the position along the normal\n    vec3 newPosition = position + normal * bumpScale * vAmount;\n\n    // Compute the position of the vertex using a standard formula\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n}\n`;\n\nexport const fragmentShader = `\n// A uniform fot the terrain texture image\nuniform sampler2D terrainTexture;\n\n// Get the varyings from the vertex shader\nvarying vec2 vUV;\n// vAmount isn't really used, but could be if necessary\nvarying float vAmount;\n\nvoid main()\n{\n    // Get the color of the fragment from the texture map\n    // at that coordinate in the UV mapping\n    gl_FragColor = texture2D(terrainTexture, vUV);\n}\n`;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App/App';\n\nReactDOM.render(\n  <Suspense fallback={null}>\n    <App />,\n  </Suspense>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}