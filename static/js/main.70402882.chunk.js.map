{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","scene","THREE","camera","window","innerWidth","innerHeight","renderer","canvas","document","querySelector","setSize","geometry","material","color","cube","add","light","position","z","animate","requestAnimationFrame","rotation","x","y","render","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"kPAyCeA,EArCH,WA2BV,OA1BAC,qBAAU,WACR,IAAIC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IAAyB,GAAIE,OAAOC,WAAWD,OAAOE,YAAa,GAAK,KACnFC,EAAW,IAAIL,IAAoB,CACvCM,OAAQC,SAASC,cAAc,SAEjCH,EAASI,QAASP,OAAOC,WAAYD,OAAOE,aAG5C,IAAIM,EAAW,IAAIV,IAAmB,EAAG,EAAG,GACxCW,EAAW,IAAIX,IAA4B,CAAEY,MAAO,UACpDC,EAAO,IAAIb,IAAYU,EAAUC,GACrCZ,EAAMe,IAAKD,GACX,IAAME,EAAQ,IAAIf,IAAuB,SAAU,OAAU,GAC7DD,EAAMe,IAAKC,GACXd,EAAOe,SAASC,EAAI,GACN,SAAVC,IACFC,sBAAuBD,GACvBL,EAAKO,SAASC,GAAK,IACnBR,EAAKO,SAASE,GAAK,IACnBT,EAAKO,SAASH,GAAK,IACnBZ,EAASkB,OAAQxB,EAAOE,GAE1BiB,KACD,IAGC,qCACE,iCACE,sEAEF,wBAAQM,GAAG,WCxBFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,SAM1BX,M","file":"static/js/main.70402882.chunk.js","sourcesContent":["import { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport './App.css';\n\nconst App = () => {\n  useEffect(() => {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    const renderer = new THREE.WebGLRenderer({\n      canvas: document.querySelector('#bg'),\n    });\n    renderer.setSize( window.innerWidth, window.innerHeight );\n\n  \n    var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    var material = new THREE.MeshStandardMaterial( { color: 0x7e31eb } );\n    var cube = new THREE.Mesh( geometry, material );\n    scene.add( cube );\n    const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n    scene.add( light );\n    camera.position.z = 2;\n    var animate = function () {\n      requestAnimationFrame( animate );\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      cube.rotation.z += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n}, []);\n\n  return (\n    <>\n      <header>\n        <p>ðŸš€ Welcome to my website!</p>\n      </header>\n      <canvas id=\"bg\"></canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}